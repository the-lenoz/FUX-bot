import asyncio
import datetime
import traceback

from aiogram import Bot
from aiogram.types import BufferedInputFile

from data.keyboards import buy_sub_keyboard, emotions_keyboard, productivity_keyboard
from db.repository import subscriptions_repository, users_repository, checkup_repository, days_checkups_repository, \
    events_repository
from settings import payment_photo, checkup_emotions_photo, checkup_productivity_photo, how_are_you_photo, emoji_dict, \
    speed_dict
from utils.—Åheckup_stat import generate_emotion_chart


async def edit_activation_sub(main_bot: Bot):
    subs = await subscriptions_repository.select_all_active_subscriptions()
    now_date = datetime.datetime.now()
    for sub in subs:
        if now_date - sub.creation_date >= datetime.timedelta(hours=24 * sub.time_limit_subscription):
            try:
                await subscriptions_repository.deactivate_subscription(sub.id)
                await main_bot.send_photo(
                    caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    photo=payment_photo,
                    chat_id=sub.user_id,
                    reply_markup=buy_sub_keyboard.as_markup())
            except Exception as e:
                print(e)
                continue
        elif (now_date - sub.creation_date >= datetime.timedelta(hours=24 * (sub.time_limit_subscription - 3))) and not sub.send_notification:
            try:
                await subscriptions_repository.update_send_notification_subscription(subscription_id=sub.id)
                await main_bot.send_photo(
                    caption="–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è",
                    photo=payment_photo,
                    chat_id=sub.user_id,
                    reply_markup=buy_sub_keyboard.as_markup())
            except Exception as e:
                print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {sub.user_id}" + traceback.format_exc() + "\n\n")

async def send_checkup(main_bot: Bot):
    checkups = await checkup_repository.select_all_active_checkups()
    now_date = datetime.datetime.now()
    for checkup in checkups:
        try:
            if (now_date.time() >= checkup.time_checkup) and ((now_date.date() - checkup.last_date_send.date()) >= datetime.timedelta(days=1)):
                checkup_day = await days_checkups_repository.get_active_day_checkup_by_checkup_id(checkup_id=checkup.id)
                if checkup_day is None:
                    days_checkup = await days_checkups_repository.get_days_checkups_by_checkup_id(checkup_id=checkup.id)
                    await days_checkups_repository.add_day_checkup(checkup_id=checkup.id,
                                                                   day=len(days_checkup) + 1,
                                                                   points=0,
                                                                   user_id=checkup.user_id,
                                                                   checkup_type=checkup.type_checkup)
                    checkup_day = await days_checkups_repository.get_active_day_checkup_by_checkup_id(checkup_id=checkup.id)
                checkup_id, day_checkup_id, type_checkup = checkup.id, checkup_day.id, checkup.type_checkup
                message_photo = checkup_emotions_photo
                check_data = "|".join([str(checkup_id), str(day_checkup_id), type_checkup])
                keyboard = emotions_keyboard(check_data)
                if type_checkup == "productivity":
                    message_photo = checkup_productivity_photo
                    keyboard = productivity_keyboard(check_data)
                await main_bot.send_photo(photo=message_photo,
                                          chat_id=checkup.user_id,
                                          reply_markup=keyboard.as_markup())
                await checkup_repository.update_last_date_send_checkup_by_checkup_id(checkup_id=checkup.id,
                                                                                     last_date_send=now_date)
        except Exception as e:
            print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {checkup.user_id}\n\n" + traceback.format_exc() + "\n\n")
            continue


async def notification_reminder(main_bot: Bot):
    users = await users_repository.select_all_users()
    now = datetime.datetime.utcnow()  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    for user in users:
        last_event = await events_repository.get_last_event_by_user_id(user_id=user.user_id)
        if not last_event:
            # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–æ–±—ã—Ç–∏–π
            continue

        delta = now - last_event.creation_date

        # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–Ω–µ–≤–Ω–æ–º –ø–æ—Ä–æ–≥–µ –∏ –ø—Ä–æ—à–ª–æ >= 1 –¥–µ–Ω—å
        if not last_event.day_notif_sent and delta >= datetime.timedelta(days=1):
            try:
                await main_bot.send_photo(
                    photo=how_are_you_photo,
                    chat_id=user.user_id,
                    caption="> –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∫–æ–ª–ª–µ–≥–∏\.\.\.\n\n\n–í—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –æ—Ç—á—ë—Ç\?üìô",
                    parse_mode="MarkdownV2",
                )
                last_event.day_notif_sent = True
                await events_repository.update_event(last_event)
            except Exception as e:
                continue

        # –ï—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–µ–ª—å–Ω–æ–µ, –∏ –ø—Ä–æ—à–ª–æ >= 7 –¥–Ω–µ–π
        elif last_event.day_notif_sent and not last_event.week_notif_sent and delta >= datetime.timedelta(days=7):
            try:
                await main_bot.send_message(
                    user.user_id,
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ."
                )
                last_event.week_notif_sent = True
                await events_repository.update_event(last_event)
            except:
                continue
        # –ï—Å–ª–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—á–Ω–æ–º—É –ø–æ—Ä–æ–≥—É, –∏ –ø—Ä–æ—à–ª–æ >= 30 –¥–Ω–µ–π
        elif last_event.week_notif_sent and not last_event.month_notif_sent and delta >= datetime.timedelta(days=30):
            try:
                await main_bot.send_message(
                    user.user_id,
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—à–µ–ª –º–µ—Å—è—Ü. –ú—ã —Å–∫—É—á–∞–µ–º –∏ –∂–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!"
                )
                last_event.month_notif_sent = True
                await events_repository.update_event(last_event)
            except:
                continue


async def send_weekly_checkups_report(main_bot: Bot):
    users = await users_repository.select_all_users()
    for user in users:
        for checkup_type in ("emotions", "productivity"):
            try:
                checkup_days = await days_checkups_repository.get_days_checkups_by_user_id(user_id=user.user_id)
                checkups_report = []
                now = datetime.datetime.now().date()
                send = False
                for weekday in range(7):
                    day = now - datetime.timedelta(days=now.weekday() - weekday)
                    day_checkup_data = 10000
                    for checkup_day in checkup_days:
                        if checkup_day.date_end_day and checkup_day.date_end_day.date() == day \
                                and checkup_day.checkup_type == checkup_type:
                            day_checkup_data = checkup_day.points
                            send = True
                    checkups_report.append(day_checkup_data)

                if send:
                    graphic = generate_emotion_chart(emotion_data=checkups_report,
                                                     dates=["–ü–ù", "–í–¢", "–°–†", "–ß–¢", "–ü–¢", "–°–ë", "–í–°"],
                                                     checkup_type=checkup_type)
                    await main_bot.send_photo(
                        photo=BufferedInputFile(file=graphic.getvalue(), filename="graphic.png"),
                        chat_id=user.user_id,
                        caption=f"üìô–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞!"
                    )
            except Exception:
                continue


async def month_checkups(main_bot: Bot):
    users = await users_repository.select_all_users()
    for user in users:
        # print(user.user_id)
        try:
            user_ended_checkups = await checkup_repository.get_ended_checkups_per_month_by_user_id(user_id=user.user_id)
            if user_ended_checkups is not None and len(user_ended_checkups) > 0:
                await main_bot.send_message(chat_id=user.user_id, text="üìô–í—ã—Å—ã–ª–∞—é —Ç–µ–±–µ –∏—Ç–æ–≥–∏ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤ –∑–∞ –º–µ—Å—è—Ü")
                for checkup in user_ended_checkups:
                    try:
                        checkup_days = await days_checkups_repository.get_days_checkups_by_checkup_id(checkup_id=checkup.id)
                        points = [day.points for day in checkup_days]
                        checkup_type = checkup.type_checkup
                        graphic = generate_emotion_chart(emotion_data=points, dates=[day.date_end_day.strftime("%d-%m") for day in checkup_days],
                                                         checkup_type=checkup_type)
                        # graphic = generate_emotion_chart(checkup_type=type_checkup)
                        graphic_bytes = graphic.getvalue()
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if checkup_type == "emotions":
                            text = f"C—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–≤–æ–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - {emoji_dict.get(round(sum(points) / len(points)))}"
                        else:
                            text = f"C—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–≤–æ–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - {speed_dict.get(round(sum(points) / len(points)))}"
                        await main_bot.send_photo(
                            photo=BufferedInputFile(file=graphic_bytes, filename="graphic.png"),
                            chat_id=user.user_id,
                            caption=f"üìô–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π —Ç—Ä–µ–∫–∏–Ω–≥–∞.\n\n{text}"
                        )
                        await asyncio.sleep(1)
                    except:
                        print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user.user_id}\n\n" + traceback.format_exc() + "\n\n")
                        continue

        except:
            print(traceback.format_exc())
            continue


async def update_power_mode_days(main_bot: Bot):
    users = await users_repository.select_all_users()
    now_date = datetime.datetime.now()
    for user in users:
        try:
            user_active_checkups = await checkup_repository.get_active_checkups_by_user_id(user_id=user.user_id)
            if user_active_checkups is not None and len(user_active_checkups) > 0:
                max_date = None
                for checkup in user_active_checkups:
                    if max_date is not None and ((now_date - checkup.last_date_send) > datetime.timedelta(hours=24)) \
                            and user.power_mode_days != 0:
                        await users_repository.update_power_mode_days_by_user_id(user_id=user.user_id, new_days=0)
                        await main_bot.send_message(chat_id=user.user_id,
                                                    text="–û—Ö‚Ä¶ —Ç–≤–æ–∏ –æ—Ä–µ—Ö–∏ —Ä–∞—Å–∫–æ–ª–æ–ª–∏—Å—åüå∞, –Ω–æ "
                                                         "–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ "
                                                        + (
                                                        "—ç–º–æ—Ü–∏–π"
                                                        if checkup.type_checkup == "emotions" else "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏") +
                                                         " —Å–Ω–æ–≤–∞"
                                                    )
        except Exception as e:
            print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user.user_id}\n\n" + traceback.format_exc() + "\n\n")
            continue








