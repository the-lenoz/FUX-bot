import asyncio
import datetime
import traceback


from aiogram import Dispatcher, Bot
from aiogram.types import BufferedInputFile

from data.keyboards import buy_sub_keyboard, emotions_keyboard, productivity_keyboard
from db.engine import DatabaseEngine
from db.repository import subscriptions_repository, users_repository, fast_help_repository, go_deeper_repository, \
    fast_help_dialogs_repository, fast_help_dialog_repository, mental_problems_repository, summary_user_repository, \
    checkup_repository, days_checkups_repository, events_repository
from settings import payment_photo, checkup_emotions_photo, checkup_productivity_photo, how_are_you_photo, emoji_dict, \
    speed_dict

from utils.rating_chat_gpt import GPT
from utils.—Åheckup_stat import generate_emotion_chart


async def edit_activation_sub(main_bot: Bot):
    # print("—Ö—É–∏–ª–∞")
    subs = await subscriptions_repository.select_all_active_subscriptions()
    now_date = datetime.datetime.now()
    for sub in subs:
        if now_date - sub.creation_date >= datetime.timedelta(hours=24 * sub.time_limit_subscription):
            try:
                await subscriptions_repository.deactivate_subscription(sub.id)
                await main_bot.send_photo(
                    caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    photo=payment_photo,
                    chat_id=sub.user_id,
                    reply_markup=buy_sub_keyboard.as_markup())
            except Exception as e:
                print(e)
                continue
        elif (now_date - sub.creation_date >= datetime.timedelta(hours=24 * (sub.time_limit_subscription - 3))) and not sub.send_notification:
            try:
                await subscriptions_repository.update_send_notification_subscription(subscription_id=sub.id)
                await main_bot.send_photo(
                    caption="–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è",
                    photo=payment_photo,
                    chat_id=sub.user_id,
                    reply_markup=buy_sub_keyboard.as_markup())
            except Exception as e:
                print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {sub.user_id}" + traceback.format_exc() + "\n\n")
                continue


async def send_week_rec(main_bot: Bot):
    users = await users_repository.select_all_users()
    now_date = datetime.datetime.now()
    for user in users:
        try:
            print(user.user_id)
            if (now_date - user.last_rec_week_date) > datetime.timedelta(days=7.0):
                user_summaries = await summary_user_repository.get_summaries_by_user_id(user_id=user.user_id)
                print(user_summaries)
                if user_summaries is not None and len(user_summaries) > 0:
                    user_last_summary = await summary_user_repository.get_summary_by_user_id_and_number_summary(user_id=user.user_id,
                                                                                                                number_summary=len(user_summaries))
                    user_problems = await mental_problems_repository.get_problems_by_summary_id(summary_id=user_last_summary.id)
                    week_rec_promt = f'''–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
                                       –¢–∞–∫–∂–µ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Å–ª–æ–≤–∞—Ä–µ, –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è,
                                         –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –µ—Å—Ç—å, –∞ –∫–∞–∫–∏—Ö –Ω–µ—Ç —É —á–µ–ª–æ–≤–µ–∫–∞\n–≤–æ—Ç —Å–ª–æ–≤–∞—Ä—å:\n{user_problems}\n
                                            \n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä–µ\n
                                            1. –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞
                                            2. –≠–º–æ—Ü–∏–∏
                                            3. –û—Ç–Ω–æ—à–µ–Ω–∏—è
                                            4. –õ—é–±–æ–≤—å 
                                            5. –ö–∞—Ä—å–µ—Ä–∞
                                            6. –§–∏–Ω–∞–Ω—Å—ã
                                            7. –ó–¥–æ—Ä–æ–≤—å–µ
                                            8. –°–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
                                            9. –í—ã–≥–æ—Ä–∞–Ω–∏–µ
                                            10. –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å")
                                            –ù–∞—á–Ω–∏ —Å–æ —Å–ª–æ–≤–∞ "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ–¥–µ–ª–∏:". –í —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ 
                                            –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –Ω–∏–∫–∞–∫–æ–≥–æ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'''
                    ai_rec = await GPT(thread_id=user.mental_ai_threat_id).send_message(user_id=user.user_id,
                                                                               temperature=user.ai_temperature,
                                                                               name=user.name,
                                                                               gender=user.gender,
                                                                               age=user.age,
                                                                               text=week_rec_promt)
                    await main_bot.send_message(text=ai_rec, chat_id=user.user_id)
                    await users_repository.update_last_rec_week_date_by_user_id(user_id=user.user_id)
                else:
                    continue

            else:
                continue
        except Exception as e:
            print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user.user_id}\n\n" + traceback.format_exc() + "\n\n")
            continue


async def send_checkup(main_bot: Bot):
    checkups = await checkup_repository.select_all_active_checkups()
    now_date = datetime.datetime.now()
    for checkup in checkups:
        try:
            if (now_date.time() >= checkup.time_checkup) and ((now_date.date() - checkup.last_date_send.date()) >= datetime.timedelta(days=1)):
                checkup_day = await days_checkups_repository.get_active_day_checkup_by_checkup_id(checkup_id=checkup.id)
                if checkup_day is None:
                    days_checkup = await days_checkups_repository.get_days_checkups_by_checkup_id(checkup_id=checkup.id)
                    await days_checkups_repository.add_day_checkup(checkup_id=checkup.id,
                                                                   day=len(days_checkup) + 1,
                                                                   points=0)
                    checkup_day = await days_checkups_repository.get_active_day_checkup_by_checkup_id(checkup_id=checkup.id)
                checkup_id, day_checkup_id, type_checkup = checkup.id, checkup_day.id, checkup.type_checkup
                message_photo = checkup_emotions_photo
                check_data = "|".join([str(checkup_id), str(day_checkup_id), type_checkup])
                keyboard = emotions_keyboard(check_data)
                if type_checkup == "productivity":
                    message_photo = checkup_productivity_photo
                    keyboard = productivity_keyboard(check_data)
                await main_bot.send_photo(photo=message_photo,
                                          chat_id=checkup.user_id,
                                          reply_markup=keyboard.as_markup())
                await checkup_repository.update_last_date_send_checkup_by_checkup_id(checkup_id=checkup.id,
                                                                                     last_date_send=now_date)
        except Exception as e:
            print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {checkup.user_id}\n\n" + traceback.format_exc() + "\n\n")
            continue


async def notification_reminder(main_bot: Bot):
    users = await users_repository.select_all_users()
    now = datetime.datetime.utcnow()  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    for user in users:
        last_event = await events_repository.get_last_event_by_user_id(user_id=user.user_id)
        if not last_event:
            # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–æ–±—ã—Ç–∏–π
            continue

        delta = now - last_event.creation_date

        # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–Ω–µ–≤–Ω–æ–º –ø–æ—Ä–æ–≥–µ –∏ –ø—Ä–æ—à–ª–æ >= 1 –¥–µ–Ω—å
        if not last_event.day_notif_sent and delta >= datetime.timedelta(days=1):
            try:
                await main_bot.send_photo(
                    photo=how_are_you_photo,
                    chat_id=user.user_id,
                    caption="> –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∫–æ–ª–ª–µ–≥–∏\.\.\.\n\n\n–í—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –æ—Ç—á—ë—Ç\?üìô",
                    parse_mode="MarkdownV2",
                )
                last_event.day_notif_sent = True
                await events_repository.update_event(last_event)
            except Exception as e:
                continue

        # –ï—Å–ª–∏ –¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–µ–ª—å–Ω–æ–µ, –∏ –ø—Ä–æ—à–ª–æ >= 7 –¥–Ω–µ–π
        elif last_event.day_notif_sent and not last_event.week_notif_sent and delta >= datetime.timedelta(days=7):
            try:
                await main_bot.send_message(
                    user.user_id,
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ."
                )
                last_event.week_notif_sent = True
                await events_repository.update_event(last_event)
            except:
                continue
        # –ï—Å–ª–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—á–Ω–æ–º—É –ø–æ—Ä–æ–≥—É, –∏ –ø—Ä–æ—à–ª–æ >= 30 –¥–Ω–µ–π
        elif last_event.week_notif_sent and not last_event.month_notif_sent and delta >= datetime.timedelta(days=30):
            try:
                await main_bot.send_message(
                    user.user_id,
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ—à–µ–ª –º–µ—Å—è—Ü. –ú—ã —Å–∫—É—á–∞–µ–º –∏ –∂–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞!"
                )
                last_event.month_notif_sent = True
                await events_repository.update_event(last_event)
            except:
                continue


async def month_checkups(main_bot: Bot):
    users = await users_repository.select_all_users()
    for user in users:
        # print(user.user_id)
        try:
            user_ended_checkups = await checkup_repository.get_ended_checkups_per_month_by_user_id(user_id=user.user_id)
            if user_ended_checkups is not None and len(user_ended_checkups) > 0:
                await main_bot.send_message(chat_id=user.user_id, text="üìô–í—ã—Å—ã–ª–∞—é —Ç–µ–±–µ –∏—Ç–æ–≥–∏ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤ –∑–∞ –º–µ—Å—è—Ü")
                for checkup in user_ended_checkups:
                    try:
                        checkup_days = await days_checkups_repository.get_days_checkups_by_checkup_id(checkup_id=checkup.id)
                        points = [day.points for day in checkup_days]
                        checkup_type = checkup.type_checkup
                        graphic = generate_emotion_chart(emotion_data=points, dates=[day.date_end_day.strftime("%d-%m") for day in checkup_days],
                                                         checkup_type=checkup_type)
                        # graphic = generate_emotion_chart(checkup_type=type_checkup)
                        graphic_bytes = graphic.getvalue()
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if checkup_type == "emotions":
                            text = f"C—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–≤–æ–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - {emoji_dict.get(round(sum(points) / len(points)))}"
                        else:
                            text = f"C—Ä–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–≤–æ–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - {speed_dict.get(round(sum(points) / len(points)))}"
                        await main_bot.send_photo(
                            photo=BufferedInputFile(file=graphic_bytes, filename="graphic.png"),
                            chat_id=user.user_id,
                            caption=f"üìô–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π —Ç—Ä–µ–∫–∏–Ω–≥–∞.\n\n{text}"
                        )
                        await asyncio.sleep(1)
                    except:
                        print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user.user_id}\n\n" + traceback.format_exc() + "\n\n")
                        continue

        except:
            print(traceback.format_exc())
            continue


async def update_power_mode_days(main_bot: Bot):
    users = await users_repository.select_all_users()
    now_date = datetime.datetime.now()
    for user in users:
        try:
            user_active_checkups = await checkup_repository.get_active_checkups_by_user_id(user_id=user.user_id)
            if user_active_checkups is not None and len(user_active_checkups) > 0:
                max_date = None
                for checkup in user_active_checkups:
                    last_ended_day = await days_checkups_repository.get_latest_ended_day_checkup_by_checkup_id(checkup_id=checkup.id)
                    if last_ended_day is not None and (max_date is None or last_ended_day.date_end_day > max_date):
                        max_date = last_ended_day.date_end_day
                if max_date is not None and ((now_date - max_date) > datetime.timedelta(hours=24)) and user.power_mode_days != 0:
                    await users_repository.update_power_mode_days_by_user_id(user_id=user.user_id, new_days=0)
                    await main_bot.send_message(chat_id=user.user_id, text="–û—Ö‚Ä¶ —Ç–≤–æ–∏ –æ—Ä–µ—Ö–∏ —Ä–∞—Å–∫–æ–ª–æ–ª–∏—Å—åüå∞, –Ω–æ –∑–∞ —Å—á—ë—Ç"
                                                                           " –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞")
        except Exception as e:
            print(f"\n\n–í–û–ó–ù–ò–ö–õ–ê –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ {user.user_id}\n\n" + traceback.format_exc() + "\n\n")
            continue








