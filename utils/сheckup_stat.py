import random
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta, date
import io
import os
import numpy as np
from PIL import Image, ImageDraw, ImageFont

import warnings

warnings.filterwarnings("ignore", category=UserWarning)

# Try to import Pilmoji if available
try:
    from pilmoji import Pilmoji

    pilmoji_available = True
except ImportError:
    pilmoji_available = False
    print("Pilmoji not installed. Emoji rendering may be limited.")
    print("To install: pip install pilmoji")


def generate_emotion_chart(emotion_data=None, dates=None, checkup_type: str | None = None):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–º–æ—Ü–∏–π (–æ—Ç 1 –¥–æ 5) –¥–ª–∏–Ω–æ–π 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ –≤–∏–¥–µ io.BytesIO (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞).
    """
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if emotion_data is None:
        emotion_data = [random.randint(1, 5) for _ in range(7)]
    if dates is None:
        dates = [(date.today() - timedelta(days=6 - i)).strftime("%m-%d") for i in range(7)]

    assert len(emotion_data) == 7, "–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–∑ 7 –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏)"

    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —ç–º–æ—Ü–∏–π
    if checkup_type == "emotions":
        emoji_levels = {
            1: "üòñ",
            2: "üòí",
            3: "üòê",
            4: "üòå",
            5: "ü§©"
        }
    else:
        emoji_levels = {
            1: "ü™µ",  # –ø–æ–ª–µ–Ω–æ ‚Äî –≤–æ–æ–±—â–µ –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è
            2: "üêå",  # —É–ª–∏—Ç–∫–∞ ‚Äî –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ
            3: "üö≤",  # –≤–µ–ª–æ—Å–∏–ø–µ–¥ ‚Äî —Å—Ä–µ–¥–Ω–µ
            4: "üöó",  # –º–∞—à–∏–Ω–∞ ‚Äî –±—ã—Å—Ç—Ä–æ
            5: "üöÄ"  # —Ä–∞–∫–µ—Ç–∞ ‚Äî –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
        }

    # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å–∏ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    fig, ax = plt.subplots(figsize=(10, 6), facecolor='#FEEDE1', dpi=200)
    ax.set_facecolor('#FEEDE1')

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –ª–∏–Ω–∏–∏ —Å –æ—Ä–∞–Ω–∂–µ–≤—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
    ax.plot(range(len(dates)), emotion_data, marker='o', markersize=10, color='orangered', markerfacecolor='orangered',
            linewidth=2)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
    ax.set_yticks(list(range(1, 6)))
    ax.set_yticklabels(["" for _ in range(1, 6)])  # –ü—É—Å—Ç—ã–µ –º–µ—Ç–∫–∏, —ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
    ax.set_xticks(range(len(dates)))

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X
    ax.set_xticklabels(dates, fontsize=12, color='orangered')

    # –í—ã–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    for i, label in enumerate(ax.get_xticklabels()):
        if i == len(dates) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            label.set_bbox(dict(facecolor='orangered', edgecolor='none', pad=5, boxstyle='round,pad=0.5'))
            label.set_color('white')

    ax.set_xlim(-0.5, len(dates) - 0.5)
    ax.set_ylim(0.5, 5.5)
    name = '–¢–†–ï–ö–ò–ù–ì –≠–ú–û–¶–ò–ô' if checkup_type == "emotions" else "–¢–†–ï–ö–ò–ù–ì –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò"
    # –£–ø—Ä–æ—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ "–¢—Ä–µ–∫–∏–Ω–≥ —ç–º–æ—Ü–∏–π"
    ax.text(0.5, 1.05, '–¢–†–ï–ö–ò–ù–ì –≠–ú–û–¶–ò–ô', ha='center', va='center', transform=ax.transAxes,
            fontsize=24, color='orangered', weight='bold')

    # –£–±–∏—Ä–∞–µ–º —Ä–∞–º–∫–∏
    for spine in ax.spines.values():
        spine.set_visible(False)

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ "–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –ì–û–¢–û–í!" –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞
    # ax.text(0.85, -0.07, '–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –ì–û–¢–û–í!', ha='right', va='center', transform=ax.transAxes,
    #         fontsize=10, color='orangered', weight='bold')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_filename = 'temp_chart.png'
    plt.tight_layout()
    plt.savefig(temp_filename, format='png', bbox_inches='tight', facecolor='#FEEDE1')
    plt.close(fig)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —á–µ—Ä–µ–∑ Pillow
    img = Image.open(temp_filename)
    width, height = img.size

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ RGBA –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    img = img.convert('RGBA')

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç –¥–ª—è —ç–º–æ–¥–∑–∏
    # try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –ª–æ–∫–∞–ª—å–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—É
    font_path = os.path.join('utils', 'fonts', 'NotoColorEmoji-Regular.ttf')
    emoji_font = None
    emoji_size = 40
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
    try:
        emoji_font = ImageFont.truetype(font_path, emoji_size)
        # print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç: {font_path}")
    except Exception as e:
        # print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        emoji_font = ImageFont.load_default()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    x_min, x_max = 0.1 * width, 0.9 * width
    y_min, y_max = 0.3 * height, 0.85 * height
    y_step = (y_max - y_min) / 4  # 5 —É—Ä–æ–≤–Ω–µ–π (1-5)

    # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    for level in range(1, 6):
        emoji_text = emoji_levels[level]
        y_pos = int(y_max - (level - 1) * (y_step * 1.23)) - 30
        x_pos = int(x_min * 0.5 - 60)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–º–æ–¥–∑–∏
        emoji_img = Image.new("RGBA", (150, 150), (0, 0, 0, 0))

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Pilmoji –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π ImageDraw
        if pilmoji_available:
            with Pilmoji(emoji_img) as pilmoji:
                pilmoji.text((0, 0), emoji_text, font=emoji_font)
        else:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –µ—Å–ª–∏ Pilmoji –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            emoji_draw = ImageDraw.Draw(emoji_img)
            emoji_draw.text((0, 0), emoji_text, font=emoji_font, embedded_color=True)
        scaled_emoji = emoji_img.resize((230, 230), Image.Resampling.LANCZOS)
        # –í—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
        img.paste(scaled_emoji, (x_pos, y_pos), scaled_emoji)

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –≤ –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª
    # try:
    #     # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–∏
    #     notebook_overlay = Image.new('RGBA', img.size, (0, 0, 0, 0))
    #     notebook_draw = ImageDraw.Draw(notebook_overlay)
    #
    #     # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∏–∫–æ–Ω–∫–∏ (–≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª)
    #     notebook_x, notebook_y = width * 0.85, height * 0.3
    #
    #     # –†–∏—Å—É–µ–º –æ—Ä–∞–Ω–∂–µ–≤—É—é —Ä–∞–º–∫—É –±–ª–æ–∫–Ω–æ—Ç–∞
    #     notebook_width, notebook_height = 50, 70
    #     notebook_draw.rectangle(
    #         [(notebook_x - notebook_width / 2, notebook_y - notebook_height / 2),
    #          (notebook_x + notebook_width / 2, notebook_y + notebook_height / 2)],
    #         outline='orangered', fill=(255, 255, 255, 200), width=3
    #     )
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –Ω–∞ –±–ª–æ–∫–Ω–æ—Ç–µ
    #     line_spacing = 10
    #     for i in range(4):
    #         y = notebook_y - notebook_height / 3 + i * line_spacing
    #         notebook_draw.line(
    #             [(notebook_x - notebook_width / 3, y), (notebook_x + notebook_width / 3, y)],
    #             fill='purple', width=2
    #         )
    #
    #     # –î–æ–±–∞–≤–ª—è–µ–º "—Å–∫—Ä–µ–ø–∫—É" –≤–≤–µ—Ä—Ö—É
    #     clip_color = 'purple'
    #     notebook_draw.rectangle(
    #         [(notebook_x - 5, notebook_y - notebook_height / 2 - 5),
    #          (notebook_x + 5, notebook_y - notebook_height / 2)],
    #         fill=clip_color, outline=None
    #     )
    #
    #     # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    #     img = Image.alpha_composite(img, notebook_overlay)

    # except Exception as e:
    #     print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–∫–∏ –±–ª–æ–∫–Ω–æ—Ç–∞: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buffer = io.BytesIO()
    img.convert('RGB').save(buffer, format='PNG')
    buffer.seek(0)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(temp_filename):
        os.remove(temp_filename)

    return buffer

#
# if __name__ == "__main__":
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
#     emotion_data = [1, 3, 2, 3, 4, 2, 5]  # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ
#     dates = [(date.today() - timedelta(days=6 - i)).strftime("%m-%d") for i in range(7)]
#
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
#     buffer = generate_emotion_chart(emotion_data, dates)
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
#     with open("emotion_chart_final.png", "wb") as f:
#         f.write(buffer.getvalue())
#
#     print("–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª emotion_chart_final.png")