import asyncio
import traceback
from datetime import timedelta, datetime

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import Message, CallbackQuery

from data.keyboards import next_politic_keyboard, have_promo_keyboard, cancel_keyboard, age_keyboard, \
    main_keyboard, choice_gender_keyboard, menu_keyboard, miss_keyboard
# from data.keyboards import choice_keyboard
# from data.messages import start_message, wait_manager, update_language
from db.repository import users_repository, referral_system_repository, \
    promo_activations_repository, subscriptions_repository
from settings import InputMessage, photos_pages, menu_photo
from utils.paginator import MechanicsPaginator

user_router = Router()


@user_router.callback_query(F.data == "start_menu", any_state)
async def start_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user_id = call.from_user.id
    user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
    if user_sub is None:
        text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º üêøÔ∏è"
    else:
        end_date = user_sub.creation_date + timedelta(days=user_sub.time_limit_subscription)
        text = (f"üêøÔ∏è–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ"
                f" {end_date.strftime('%d.%m.%y, %H:%M')} +GMT3")
    keyboard = await main_keyboard(user_id=user_id)
    await call.message.answer_photo(photo=menu_photo,
                                    caption=text,
                                    reply_markup=keyboard.as_markup())
    await call.message.delete()



@user_router.message(F.text == "/menu", any_state)
@user_router.message(F.text == "/start", any_state)
async def send_user_message(message: Message, state: FSMContext, bot: Bot):
    user = await users_repository.get_user_by_user_id(message.from_user.id)
    user_id = message.from_user.id
    # quote = "> –≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞, –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é MarkdownV2"
    # explanation = "–≠—Ç–æ –æ–±—É—á–∞—é—â–∏–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–º—ã—Å–ª –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã\."
    #
    # # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ –¥–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Ü–∏—Ç–∞—Ç—ã, –∞ –≤—Ç–æ—Ä–æ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–±–∑–∞—Ü–∞)
    # message_text = f"{quote}\n\n{explanation}"
    # await message.answer(message_text, parse_mode="MarkdownV2")
    if user is None or not user.confirm_politic:
        if user is None:
            try:
                await users_repository.add_user(user_id=message.from_user.id, username=message.from_user.username)
            finally:
                await message.answer('üêøÔ∏èüìô–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏'
                                     ' –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—â–∏—â—ë–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å 152-–§–ó.\n\n'
                                     '<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:</b> https://disk.yandex.ru/i/3xWhbQXOrWdAig\n\n<b>–°–æ–≥–ª–∞—à–µ–Ω–∏–µ'
                                     ' –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</b> https://disk.yandex.ru/i/pJmigSHkLXekLQ',
                                     disable_web_page_preview=True,
                                     reply_markup=next_politic_keyboard.as_markup())
    elif not user.full_registration:
        if user.name is None:
            await go_to_enter_initials(bot=bot, call=message, state=state)
        elif user.gender is None:
            await message.answer("–í –∫–∞–∫–æ–º —Ä–æ–¥–µ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üß°",
                                 reply_markup=choice_gender_keyboard.as_markup())
        elif user.age is None:
            await message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–±–µ –±–ª–∏–∂–µ?(–ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ãüß°)",
                                 reply_markup=age_keyboard.as_markup())
    else:
        user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
        if user_sub is None:
            text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º üêøÔ∏è"
        else:
            end_date = user_sub.creation_date + timedelta(days=user_sub.time_limit_subscription)
            text = (f"üêøÔ∏è–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ"
                    f" {end_date.strftime('%d.%m.%y, %H:%M')} +GMT3")
        keyboard = await main_keyboard(user_id=user_id)
        await message.answer_photo(caption=text,
                                   photo=menu_photo,
                                    reply_markup=keyboard.as_markup())


@user_router.callback_query(F.data == "confirm_politic")
async def confirm_politic(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?ü•ú", reply_markup=have_promo_keyboard.as_markup())
    await users_repository.update_confirm_politic_by_user_id(user_id=call.from_user.id)


async def go_to_enter_initials(call: CallbackQuery | Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    message_delete = state_data.get("message_delete")
    if message_delete:
        try:
            await bot.delete_message(chat_id=call.from_user.id, message_id=message_delete)
        except:
            print(traceback.format_exc())
    if type(call) is CallbackQuery:
        # if call.from_user.first_name is None:
        await state.set_state(InputMessage.enter_initials)
        message_delete = await call.message.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üêøÔ∏è\n\n–ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –ª—É—á—à–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üß°",
                                  reply_markup=miss_keyboard.as_markup())
        await state.update_data(message_delete=message_delete.message_id)
        try:
            await call.message.delete()
        finally:
            return
    else:
        # if call.from_user.first_name is None:
        await state.set_state(InputMessage.enter_initials)
        message_delete = await call.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üêøÔ∏è\n\n–ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –ª—É—á—à–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üß°", reply_markup=miss_keyboard.as_markup())
        await state.update_data(message_delete=message_delete.message_id)
        await call.delete()



@user_router.callback_query(F.data.startswith("have_promo"))
async def have_promo(call: CallbackQuery, state: FSMContext, bot: Bot):
    answer = call.data.split("|")[1]
    if answer == "yes":
        await state.set_state(InputMessage.enter_promo)
        delete_message = await call.message.answer("ü•ú–û—Ç–ª–∏—á–Ω–æ ‚Äî –≤–≤–µ–¥–∏ <b>–ø—Ä–æ–º–æ–∫–æ–¥</b>, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –¥—Ä—É–≥!",
                                  reply_markup=miss_keyboard.as_markup())
        await state.update_data(delete_message_id=delete_message.message_id)
        await call.message.delete()
        return
    await go_to_enter_initials(call, state, bot)



@user_router.callback_query(F.data == "cancel", InputMessage.enter_promo)
async def cancel_promo(call: CallbackQuery, state: FSMContext, bot: Bot):
    user = await users_repository.get_user_by_user_id(user_id=call.from_user.id)
    user_id = call.from_user.id
    if (user is not None) and user.full_registration:
        keyboard = await main_keyboard(user_id=user_id)
        await call.message.answer_photo(photo=menu_photo,
                                        reply_markup=keyboard.as_markup())
        await call.message.delete()
        return
    await state.clear()
    await call.message.delete()
    await call.message.answer('–ï—Å–ª–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∑–∞—Ö–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥, —Ç–æ'
                              ' —Ç—ã —Å–º–æ–∂–µ—à—å —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)')
    await asyncio.sleep(1)
    await go_to_enter_initials(call, state, bot)



@user_router.message(F.text, InputMessage.enter_promo)
async def user_enter_promo_code(message: Message, state: FSMContext, bot: Bot):
    promo_code = message.text
    user_id = message.from_user.id
    state_data = await state.get_data()
    delete_message_id = state_data.get("delete_message_id")
    from_referral = state_data.get("from_referral")
    if delete_message_id is not None:
        await bot.delete_message(chat_id=user_id, message_id=delete_message_id)
    promo = await referral_system_repository.get_promo_by_promo_code(promo_code=promo_code)
    if promo is None:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                             reply_markup=cancel_keyboard.as_markup())
        return
    elif promo.bring_user_id == message.from_user.id and promo.type_promo == "standard":
        await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–∞–º –∂–µ –≤—ã–ø—É—Å—Ç–∏–ª)",
                             reply_markup=menu_keyboard.as_markup())
        return
    await state.clear()
    # delete_message = await message.answer("–°–µ–∫—É–Ω–¥–æ—á–∫—É, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ)")
    if promo.type_promo == "standard":
        user = await users_repository.get_user_by_user_id(user_id=user_id)
        if user.activate_promo:
            if from_referral is None or not from_referral:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–∞–∑–∞—Ç—å. –¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ–Ω—É—Å—ã —Ä–∞–Ω–µ–µ")
                await go_to_enter_initials(message, state, bot)
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–∞–∑–∞—Ç—å. –¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ–Ω—É—Å—ã —Ä–∞–Ω–µ–µ",
                                     reply_markup=menu_keyboard.as_markup())
            return
        await referral_system_repository.update_activations_by_promo_id(promo_id=promo.id)
        await promo_activations_repository.add_activation(promo_id=promo.id, activate_user_id=user_id)
        await users_repository.update_activate_promo_by_user_id(user_id=user_id)
        activate_user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
        if activate_user_sub is None:
            await subscriptions_repository.add_subscription(user_id=user_id,
                                                            time_limit_subscription=7)
            end_date = datetime.now() + timedelta(days=7)
            text = f"‚úÖ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å <b>–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)"
        else:
            await subscriptions_repository.update_time_limit_subscription(subscription_id=activate_user_sub.id,
                                                                          new_time_limit=7)
            end_date = activate_user_sub.creation_date + timedelta(days=activate_user_sub.time_limit_subscription + 7)
            text = f"‚úÖ –ö —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É —Ç–µ–±–µ –¥–æ–±–∞–≤–∏–ª–∏ <b>–æ–¥–Ω—É –Ω–µ–¥–µ–ª—é</b>! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)"
        await message.answer(text=text)



        if from_referral is None and not from_referral:
            await go_to_enter_initials(message, state, bot)
        await asyncio.sleep(2)
        promo = await referral_system_repository.get_promo_by_bring_user_id(bring_user_id=promo.bring_user_id)
        activations = promo.activations
        bring_user_subscription = await subscriptions_repository.get_active_subscription_by_user_id(user_id=promo.bring_user_id)
        if activations > 10:
            try:
                await bot.send_message(chat_id=promo.bring_user_id,
                                       text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã–ø—É—â–µ–Ω–Ω—ã–π —Ç–æ–±–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω,"
                                     " –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤ –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–µ–±–µ –¥–∞—Ç—å,"
                                     " —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–æ–ª–µ–µ 10 —Ä–∞–∑",
                                     reply_markup=menu_keyboard.as_markup())
            except:
                print(traceback.format_exc())
        elif activations == 5:
            if bring_user_subscription is None:
                end_date = datetime.now() + timedelta(days=30)
                await subscriptions_repository.add_subscription(user_id=promo.bring_user_id,
                                                                time_limit_subscription=30)
                text = (f"<b>–ü—è—Ç—å –¥—Ä—É–∑–µ–π</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥. ‚úÖ"
                        f" –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–¥–∏–Ω –º–µ—Å—è—Ü! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç"
                        f" –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)")
            else:
                end_date = bring_user_subscription.creation_date + timedelta(days=bring_user_subscription.time_limit_subscription + 30)
                await subscriptions_repository.update_time_limit_subscription(subscription_id=bring_user_subscription.id,
                                                                              new_time_limit=30)
                text = (f"–ü—è—Ç—å –¥—Ä—É–∑–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥. ‚úÖ"
                        f" –ö —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É —Ç–µ–±–µ –¥–æ–±–∞–≤–∏–ª–∏ <b>–æ–¥–∏–Ω –º–µ—Å—è—Ü</b>!"
                        f" –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)")
            try:
                await bot.send_message(chat_id=promo.bring_user_id, text=text,
                                     reply_markup=menu_keyboard.as_markup())
            except:
                print(traceback.format_exc())
        elif activations == 10:
            if bring_user_subscription is None:
                end_date = datetime.now() + timedelta(days=30)
                await subscriptions_repository.add_subscription(user_id=promo.bring_user_id,
                                                                time_limit_subscription=90)
                text = (f"<b>–î–µ—Å—è—Ç—å –¥—Ä—É–∑–µ–π</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥. ‚úÖ"
                        f" –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞!"
                        f" –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3")
            else:
                end_date = bring_user_subscription.creation_date + timedelta(
                    days=bring_user_subscription.time_limit_subscription + 90)
                await subscriptions_repository.update_time_limit_subscription(subscription_id=bring_user_subscription.id,
                                                                              new_time_limit=90)
                text = (f"–î–µ—Å—è—Ç—å –¥—Ä—É–∑–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ç–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥. ‚úÖ"
                        f" –ö —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É —Ç–µ–±–µ –¥–æ–±–∞–≤–∏–ª–∏ <b>—Ç—Ä–∏ –º–µ—Å—è—Ü–∞</b>!"
                        f" –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)")
            try:
                await bot.send_message(chat_id=promo.bring_user_id, text=text,
                                     reply_markup=menu_keyboard.as_markup())
            except:
                print(traceback.format_exc())
        elif activations == 1:
            if bring_user_subscription is None:
                end_date = datetime.now() + timedelta(days=7)
                await subscriptions_repository.add_subscription(user_id=promo.bring_user_id,
                                                                time_limit_subscription=7)
                text = (f"–¢–≤–æ–π –¥—Ä—É–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥. ‚úÖ "
                        f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å <b>–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)")
            else:
                end_date = bring_user_subscription.creation_date + timedelta(
                    days=bring_user_subscription.time_limit_subscription + 7)
                await subscriptions_repository.update_time_limit_subscription(subscription_id=bring_user_subscription.id,
                                                                              new_time_limit=7)
                text = (f"–¢–≤–æ–π –¥—Ä—É–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥. ‚úÖ"
                        f" –ö —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É —Ç–µ–±–µ –¥–æ–±–∞–≤–∏–ª–∏ –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é!"
                        f" –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)")
            try:
                await bot.send_message(chat_id=promo.bring_user_id, text=text,
                                     reply_markup=menu_keyboard.as_markup())
            except:
                print(traceback.format_exc())
        else:
            await bot.send_message(chat_id=promo.bring_user_id, text=f"–¢–≤–æ–π –¥—Ä—É–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥. ‚úÖ"
                                                                     f" –ü–æ —Ç–≤–æ–µ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É —É–∂–µ {activations} –∞–∫—Ç–∏–≤–∞—Ü–∏–π",
                                   reply_markup=menu_keyboard.as_markup())
    else:
        promo_activations = await promo_activations_repository.get_activations_by_promo_id(promo_id=promo.id)
        if promo.active is False:
            if from_referral is None or not from_referral:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                await go_to_enter_initials(message, state, bot)
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω",
                                     reply_markup=menu_keyboard.as_markup())
            return
        if len(promo_activations) >= promo.max_activations:
            if from_referral is None or not from_referral:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑")
                await go_to_enter_initials(message, state, bot)
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑",
                                     reply_markup=menu_keyboard.as_markup())
            return
        if user_id in [promo_activation.activate_user_id for promo_activation in promo_activations]:
            if from_referral is None or not from_referral:
                await message.answer("–¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ")
                await go_to_enter_initials(message, state, bot)
            else:
                await message.answer("–¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ",
                                     reply_markup=menu_keyboard.as_markup())
            return
        await referral_system_repository.update_activations_by_promo_id(promo_id=promo.id)
        await promo_activations_repository.add_activation(promo_id=promo.id, activate_user_id=user_id)
        # await users_repository.update_activate_promo_by_user_id(user_id=user_id)
        activate_user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
        if activate_user_sub is None:
            await subscriptions_repository.add_subscription(user_id=user_id,
                                                            time_limit_subscription=promo.days_sub)
            end_date = datetime.now() + timedelta(days=promo.days_sub)
            text = f"‚úÖ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>{promo.days_sub} –¥–Ω–µ–π</b>! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)"
        else:
            await subscriptions_repository.update_time_limit_subscription(subscription_id=activate_user_sub.id,
                                                                          new_time_limit=promo.days_sub)
            end_date = activate_user_sub.creation_date + timedelta(days=activate_user_sub.time_limit_subscription + promo.days_sub)
            text = f"‚úÖ –ö —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É —Ç–µ–±–µ –¥–æ–±–∞–≤–∏–ª–∏ <b>{promo.days_sub} –¥–Ω–µ–π</b>! –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date.strftime('%d.%m.%y, %H:%M')} (GMT+3)"
        await message.answer(text=text)

        if from_referral is None and not from_referral:
            await go_to_enter_initials(message, state, bot)





@user_router.callback_query(F.data == "cancel", InputMessage.enter_initials)
async def cancel_promo(call: CallbackQuery, state: FSMContext):
    await state.clear()
    # await call.message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–±–µ –±–ª–∏–∂–µ?"
    #                      " (–ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ãüß°)",
    #                      reply_markup=age_keyboard.as_markup())
    await call.message.answer("–í –∫–∞–∫–æ–º —Ä–æ–¥–µ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üß°",
                         reply_markup=choice_gender_keyboard.as_markup())
    await call.message.delete()
    await users_repository.update_initials_id_by_user_id(user_id=call.from_user.id, first_name="NoName")


@user_router.message(F.text, InputMessage.enter_initials)
async def user_enter_promo_code(message: Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    message_delete = state_data.get("message_delete")
    if message_delete:
        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=message_delete)
        except:
            print(traceback.format_exc())
    data = message.text.split()
    name = data[0]
    await users_repository.update_initials_id_by_user_id(user_id=message.from_user.id,
                                                         first_name=name)
    # await message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–±–µ –±–ª–∏–∂–µ?"
    #                           " (–ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ãüß°)",
    #                           reply_markup=age_keyboard.as_markup())
    await message.answer("–í –∫–∞–∫–æ–º —Ä–æ–¥–µ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?üß°",
                         reply_markup=choice_gender_keyboard.as_markup())


@user_router.callback_query(F.data.startswith("gender"), any_state)
async def user_enter_gender(call: CallbackQuery, state: FSMContext):
    gender = call.data.split("|")[1]
    await users_repository.update_gender_by_user_id(user_id=call.from_user.id, gender=gender)
    await call.message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–±–µ –±–ª–∏–∂–µ?"
                              " (–ß—Ç–æ–±—ã —è –º–æ–≥ –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ãüß°)",
                              reply_markup=age_keyboard.as_markup())
    await call.message.delete()


@user_router.callback_query(F.data.startswith("age"))
async def user_choice_age(call: CallbackQuery, state: FSMContext):
    age = call.data.split("|")[1]
    user_id = call.from_user.id
    paginator = MechanicsPaginator(page_now=1)
    keyboard = paginator.generate_now_page()
    await call.message.answer_photo(photo=photos_pages.get(paginator.page_now),
                                    reply_markup=keyboard)
    await call.message.delete()
    await users_repository.update_age_by_user_id(user_id=user_id, age=age)
    await users_repository.update_full_reg_by_user_id(user_id=user_id)
