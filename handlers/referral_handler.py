from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.deep_linking import create_start_link

from data.keyboards import referral_keyboard, menu_keyboard, generate_gift_keyboard
from db.repository import referral_system_repository
from data.message_templates import messages_dict
from utils.generate_promo import generate_single_promo_code
from utils.state_models import InputMessage

referral_router = Router()


@referral_router.callback_query(F.data == "referral_system")
async def referral_system_message(call: CallbackQuery):
    await call.message.answer(text=messages_dict["start_referral_text"], reply_markup=referral_keyboard.as_markup())
    await call.message.delete()


@referral_router.message(Command("referral"))
async def referral_command_handler(message: Message, bot: Bot):
    await message.answer(text=messages_dict["start_referral_text"], reply_markup=referral_keyboard.as_markup())


@referral_router.callback_query(F.data == "create_promo_code")
async def create_system_message(call: CallbackQuery):
    user_id = call.from_user.id
    promo = await referral_system_repository.get_promo_by_bring_user_id(bring_user_id=user_id)
    if promo is not None:
        referral_link = await create_start_link(call.bot, promo.promo_code)
        await call.message.answer(f"ü•ú–¢—ã —É–∂–µ <b>–≤—ã–ø—É—Å–∫–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥</b>. –ü–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–º–æ–∫–æ–¥—É –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π!\n\n"
                                  f"–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo.promo_code}</code>\n"
                                  f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}",

                                  reply_markup=menu_keyboard.as_markup())
    else:
        promo_code = await generate_single_promo_code()
        await referral_system_repository.add_promo(bring_user_id=user_id, promo_code=promo_code)
        referral_link = await create_start_link(call.bot, promo_code)
        await call.message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–ø—É—Å—Ç–∏–ª –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>. –¢–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
                                  f" –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {referral_link}, —á—Ç–æ–±—ã –∏ —Ç—ã, –∏ –æ–Ω–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –±–æ–Ω—É—Å—ã)",
                                  reply_markup=menu_keyboard.as_markup())
    await call.message.delete()


@referral_router.callback_query(F.data == "enter_promo_code")
async def enter_promo_code_message(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    delete_message = await call.message.answer("ü•ú–û—Ç–ª–∏—á–Ω–æ ‚Äî –≤–≤–µ–¥–∏ <b>–ø—Ä–æ–º–æ–∫–æ–¥</b>, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª —Ç–≤–æ–π –¥—Ä—É–≥!",
                              reply_markup=menu_keyboard.as_markup())
    await state.set_state(InputMessage.enter_promo)
    await state.update_data(message_delete_id = delete_message.message_id, from_referral=True)

@referral_router.callback_query(F.data == "buy_gift")
async def enter_promo_code_message(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏, —á—Ç–æ –ø–æ–¥–∞—Ä–∏—à—å –¥—Ä—É–≥—É!",
        reply_markup=(await generate_gift_keyboard(call.from_user.id)).as_markup()
    )
    await call.message.delete()

