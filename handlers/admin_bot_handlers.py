import asyncio

from aiogram import Router, types, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import InlineKeyboardButton, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import main_bot
from data.keyboards import admin_keyboard, add_delete_admin, cancel_keyboard, choice_bot_stat, back_to_bots_keyboard, \
    db_tables_keyboard, type_users_mailing_keyboard, statistics_keyboard
from db.repository import admin_repository, users_repository, ai_requests_repository, subscriptions_repository, \
    referral_system_repository
from settings import InputMessage, business_connection_id
from utils.generate_promo import generate_single_promo_code
from utils.get_table_db_to_excel import export_table_to_memory
from utils.is_main_admin import is_main_admin
from utils.list_admins_keyboard import Admins_kb

admin_router = Router()


@admin_router.callback_query(F.data=="cancel", any_state)
@is_main_admin
async def admin_cancel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.answer(text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=admin_keyboard)
    await call.message.delete()


@admin_router.callback_query(F.data.startswith("db_tables|"), any_state)
@is_main_admin
async def choice_table_db(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    table_name = call.data.split("|")[1]
    await state.clear()
    db_table = export_table_to_memory(table_name=table_name)
    if db_table == "Error":
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await call.message.answer_document(document=BufferedInputFile(file=db_table,
                                                               filename=f"{table_name}.xlsx"))


@admin_router.message(F.text=="/start", any_state)
@is_main_admin
async def admin_start(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.delete()
    await message.answer(text="–≠—Ç–æ –ê–¥–º–∏–Ω –±–æ—Ç. –° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,"
                              " –∞ —Ç–∞–∫–∂–µ –¥–µ–ª–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–ºü§ñ", reply_markup=admin_keyboard)


@admin_router.message(F.text=="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
@is_main_admin
async def new_mailing(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                         reply_markup=type_users_mailing_keyboard.as_markup())


@admin_router.message(F.text=="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@is_main_admin
async def get_statistics(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                         reply_markup=statistics_keyboard.as_markup())


@admin_router.callback_query(F.data.startswith("statistics"), any_state)
@is_main_admin
async def enter_type_users_for_mailing(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    type_statistics = call.data.split("|")[1]
    await state.clear()
    text_message = ""
    if type_statistics == "users":
        user_stat = await users_repository.get_user_creation_statistics()
        text_message = (f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å: <b>{user_stat.get('day')}</b>\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{user_stat.get('week')}</b>\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü: <b>{user_stat.get('month')}</b>\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª: <b>{user_stat.get('quarter')}</b>\n"
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è <b>{user_stat.get('all_time')}</b>")
    elif type_statistics == "gpt":
        ai_stat = await ai_requests_repository.get_ai_requests_statistics()
        text_message = (
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –∫ GPT (–±–µ–∑ –∞—É–¥–∏–æ):\n\n"
            f"–ó–∞ –¥–µ–Ω—å:\n"
            f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{ai_stat['day']['total']}</b>\n"
            f"   –° —Ñ–æ—Ç–æ: <b>{ai_stat['day']['with_photo']}</b>\n"
            f"   –° —Ñ–∞–π–ª–∞–º–∏: <b>{ai_stat['day']['with_files']}</b>\n\n"
            f"–ó–∞ –Ω–µ–¥–µ–ª—é:\n"
            f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{ai_stat['week']['total']}</b>\n"
            f"   –° —Ñ–æ—Ç–æ: <b>{ai_stat['week']['with_photo']}</b>\n"
            f"   –° —Ñ–∞–π–ª–∞–º–∏: <b>{ai_stat['week']['with_files']}</b>\n\n"
            f"–ó–∞ –º–µ—Å—è—Ü:\n"
            f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{ai_stat['month']['total']}</b>\n"
            f"   –° —Ñ–æ—Ç–æ: <b>{ai_stat['month']['with_photo']}</b>\n"
            f"   –° —Ñ–∞–π–ª–∞–º–∏: <b>{ai_stat['month']['with_files']}</b>\n\n"
            f"–ó–∞ –∫–≤–∞—Ä—Ç–∞–ª:\n"
            f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{ai_stat['quarter']['total']}</b>\n"
            f"   –° —Ñ–æ—Ç–æ: <b>{ai_stat['quarter']['with_photo']}</b>\n"
            f"   –° —Ñ–∞–π–ª–∞–º–∏: <b>{ai_stat['quarter']['with_files']}</b>\n\n"
            f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n"
            f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: <b>{ai_stat['all_time']['total']}</b>\n"
            f"   –° —Ñ–æ—Ç–æ: <b>{ai_stat['all_time']['with_photo']}</b>\n"
            f"   –° —Ñ–∞–π–ª–∞–º–∏: <b>{ai_stat['all_time']['with_files']}</b>"
        )
    else:
        sub_stat = await subscriptions_repository.get_active_subscriptions_count()
        text_message = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –ø–æ–¥–ø–∏—Å–∫–∞: <b>{sub_stat}</b>"
    await call.message.answer(text=text_message, parse_mode="HTML")
    await call.message.delete()



@admin_router.callback_query(F.data.startswith("type_users_mailing"), any_state)
@is_main_admin
async def enter_type_users_for_mailing(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    type_users = call.data.split("|")[1]
    if type_users == "all":
        message = await call.message.answer(text="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í–°–ï–ú —Ä–∞–∑–æ—à–ª–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                                       reply_markup=cancel_keyboard.as_markup())
    elif type_users == "sub":
        message = await call.message.answer(text="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ  —Ä–∞–∑–æ—à–ª–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –° –ü–û–î–ü–ò–°–ö–û–ô",
                                            reply_markup=cancel_keyboard.as_markup())
    else:
        message = await call.message.answer(text="–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–æ—à–ª–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ë–ï–ó –ü–û–î–ü–ò–°–ö–ò",
                                            reply_markup=cancel_keyboard.as_markup())
    await state.set_state(InputMessage.enter_message_mailing)
    await state.update_data(message_id=call.message.message_id, type_users=type_users)



@admin_router.message(F.text=="–í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü")
@is_main_admin
async def get_db_tables(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    message = await message.answer(text="–í—ã–±–µ—Ä–∏ —Ç–∞–±–ª–∏—Ü—É, –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–≥—Ä—É–∑–∏—Ç—å",
                                   reply_markup=db_tables_keyboard.as_markup())


@admin_router.message(F.text, InputMessage.enter_message_mailing)
@is_main_admin
async def enter_message_mailing(message: types.Message, state: FSMContext, bot: Bot):
    # if filename == "all_bots":
    state_data = await state.get_data()
    type_users = state_data.get("type_users")
    message_id = state_data.get("message_id")
    users = await users_repository.select_all_users()
    if type_users == "all":
        for user in users:
            # print(user.user_id)
            try:
                await main_bot.send_message(chat_id=user.user_id, text=message.text)
            except:
                continue
    elif type_users == "sub":
        for user in users:
            user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user.user_id)
            if user_sub:
                try:
                    await main_bot.send_message(chat_id=user.user_id, text=message.text)
                except:
                    continue
    elif type_users == "not_sub":
        for user in users:
            user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user.user_id)
            if user_sub is None:
                try:
                    await main_bot.send_message(chat_id=user.user_id, text=message.text)
                except:
                    continue
    await message.answer(text="–í–∞—à–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞", reply_markup=admin_keyboard)
    await bot.delete_message(message_id=message_id, chat_id=message.from_user.id)
    await state.clear()


@admin_router.message(F.text=="–î–æ–±–∞–≤–∏—Ç—å / —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
@is_main_admin
async def add_or_delete_admin(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", reply_markup=add_delete_admin.as_markup())


@admin_router.callback_query(F.data == "add_admin")
@is_main_admin
async def enter_new_admin_id(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.edit_text(text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ telegram id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞! –£—á—Ç–∏,"
                                      " —á—Ç–æ —É –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∞—Ç —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º",
                                 reply_markup=cancel_keyboard.as_markup())
    await state.set_state(InputMessage.enter_admin_id)


@admin_router.callback_query(F.data == "delete_admin")
@is_main_admin
async def delete_old_admin(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    keyboard = await Admins_kb().generate_list()
    await call.message.edit_text(text="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å",
                                 reply_markup=keyboard.as_markup())


@admin_router.callback_query(F.data.startswith("admin|"))
@is_main_admin
async def actions_admin(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    admin_id = call.data.split("|")[1]
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"delete|{admin_id}"))
    keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel"))
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–¥–º–∏–Ω–æ–º!",
                                 reply_markup=keyboard.as_markup())


@admin_router.callback_query(F.data.startswith("delete|"))
@is_main_admin
async def choice_delete_admin(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    admin_id = call.data.split("|")[1]
    await admin_repository.delete_admin_by_admin_id(int(admin_id))
    await call.message.answer(text=f"–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É–¥–∞–ª–∏–ª–∏ –∞–¥–º–∏–Ω–∞ —Å telegram id {admin_id},"
                                   f" –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è!", reply_markup=admin_keyboard)
    await call.message.delete()


@admin_router.message(F.text, InputMessage.enter_admin_id)
@is_main_admin
async def add_mew_admin(message: types.Message, state: FSMContext, bot: Bot):
    try:
        message_admin = await bot.send_message(chat_id=message.text, text="–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –∫–∞–∫ –∞–¥–º–∏–Ω–∞!")
        await admin_repository.add_admin(admin_id=int(message.text), username=message_admin.chat.username)
        await message.answer(text="–û—Ç–ª–∏—á–Ω–æ, –≤—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞!", reply_markup=admin_keyboard)
        await message.delete()
        await state.clear()
    except:
        await message.answer(text="–î–∞–Ω–Ω–æ–≥–æ telegram id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º, —É–±–µ–¥–∏—Ç–µ—Å—å"
                                  " –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
                             reply_markup=cancel_keyboard.as_markup())


@admin_router.message(F.text=="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
@is_main_admin
async def get_statistics(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    await state.set_state(InputMessage.enter_promo_days)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                         reply_markup=cancel_keyboard.as_markup())


@admin_router.message(F.text, InputMessage.enter_promo_days)
@is_main_admin
async def get_statistics(message: types.Message, state: FSMContext, bot: Bot):
    max_days = message.text
    if max_days.isdigit():
        await state.clear()
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                             reply_markup=cancel_keyboard.as_markup())
        await state.set_state(InputMessage.enter_max_activations_promo)
        await state.update_data(max_days=max_days)
        return
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π,"
                         " –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                         reply_markup=cancel_keyboard.as_markup())


@admin_router.message(F.text, InputMessage.enter_max_activations_promo)
@is_main_admin
async def get_statistics(message: types.Message, state: FSMContext, bot: Bot):
    max_activations = message.text
    state_data = await state.get_data()
    max_days = int(state_data.get("max_days"))
    if max_activations.isdigit():
        max_activations = int(max_activations)
        await state.clear()
        promo_code = await generate_single_promo_code()
        await referral_system_repository.add_promo(promo_code=promo_code,
                                                   max_days=max_days,
                                                   max_activations=max_activations,
                                                   type_promo="from_admin")
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤—ã–ø—É—Å—Ç–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>")
        return
    await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏"
                         " –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                         reply_markup=cancel_keyboard.as_markup())
