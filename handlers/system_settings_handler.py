from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import any_state
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from data.keyboards import  menu_keyboard, menu_button, ai_temperature_keyboard
from db.repository import users_repository, checkup_repository, subscriptions_repository
from settings import InputMessage, mechanic_text, mechanic_checkup, is_valid_email, fast_help_promt, go_deeper_promt, \
    ai_temperature_text, is_valid_time, temperature_ai_photo

system_settings_router = Router()


@system_settings_router.callback_query(F.data == "system_settings", any_state)
async def system_settings_callback(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    keyboard = InlineKeyboardBuilder()
    user_checkups = await checkup_repository.get_active_checkups_by_user_id(user_id=user_id)
    if user_checkups:
        keyboard.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–æ–≤", callback_data="settings|checkups"))
    keyboard.row(InlineKeyboardButton(text="–§–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è", callback_data="settings|temperature"))
    keyboard.row(menu_button)
    await call.message.answer("–Ø —Ç–∞–∫–∂–µ —É–º–µ—é <b>–≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä—è–º–æ</b> ‚Äî –±–µ–∑ —Å—é—Å—é–∫–∞–Ω—å—è –∏ –ª–∏—à–Ω–µ–π –º—è–≥–∫–æ—Å—Ç–∏.üéØ\n\n"
                              "–ï—Å–ª–∏ —Ç–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ, –∫–æ–≥–¥–∞ —Å —Ç–æ–±–æ–π –≥–æ–≤–æ—Ä—è—Ç –ø–æ –¥–µ–ª—É, —á—ë—Ç–∫–æ –∏ –±–µ–∑ –æ–±—ë—Ä—Ç–æ–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ"
                              " –≤–∫–ª—é—á–∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π —Ä–µ–∂–∏–º.\n\n–ü—Ä–∏–º–µ—Ä, –∫–∞–∫ —è –Ω–µ –±—É–¥—É:\n\n‚Äú–¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å. "
                              "–í—Å—ë –æ–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è.‚Äù\n\nüêøÔ∏è–ü—Ä–∏–º–µ—Ä, –∫–∞–∫ —è –±—É–¥—É:\n\n‚Äú–¢—ã –≤—ã–≥–æ—Ä–µ–ª,"
                              " –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–∞–º —Å–µ–±—è –∑–∞–≥–Ω–∞–ª. –û—Ç–¥–æ—Ö–Ω–∏ —É–∂–µ, –∞ –Ω–µ –≥–µ—Ä–æ–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–∞–¥–∞–π.‚Äù\n\n"
                              "üå∞–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏.",
                              reply_markup=keyboard.as_markup())
    await call.message.delete()


@system_settings_router.callback_query(F.data.startswith("settings"), any_state)
async def set_system_settings(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    type_setting = call.data.split("|")[1]
    if type_setting == "checkups":
        user_checkups = await checkup_repository.get_active_checkups_by_user_id(user_id=user_id)
        keyboard = InlineKeyboardBuilder()
        for checkup in user_checkups:
            text = "ü§©–¢—Ä–µ–∫–∏–Ω–≥ —ç–º–æ—Ü–∏–π" if checkup.type_checkup == "emotions" else "üöÄ–¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            keyboard.row(InlineKeyboardButton(text=text, callback_data=f"edit_checkup|{checkup.id}"))
        keyboard.row(menu_button)
        await call.message.answer("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫–∏–Ω–≥, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–≥–æ, —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å‚öôÔ∏è",
                                  reply_markup=keyboard.as_markup())
        await call.message.delete()
        return
    user_sub = await subscriptions_repository.get_active_subscription_by_user_id(user_id=user_id)
    if user_sub:
        await call.message.answer_photo(photo=temperature_ai_photo,
                                        caption=ai_temperature_text, reply_markup=ai_temperature_keyboard.as_markup())
        await call.message.delete()
    else:
        await call.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å "
                                  "—Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ —É —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ üå∞",
                                  reply_markup=menu_keyboard.as_markup())
        await call.message.delete()


@system_settings_router.callback_query(F.data.startswith("ai_temperature"), any_state)
async def ai_temperature_callback(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    ai_temperature = float(call.data.split("|")[1])
    await users_repository.update_ai_temperature_by_user_id(user_id, ai_temperature)
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–≤–æ–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω—ã!",
                              reply_markup=menu_keyboard.as_markup())
    await call.message.delete()


@system_settings_router.callback_query(F.data.startswith("edit_checkup"), any_state)
async def edit_checkup_time_call(call: CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    checkup_id = int(call.data.split("|")[1])
    checkup = await checkup_repository.get_checkup_by_checkup_id(checkup_id=checkup_id)
    await state.set_state(InputMessage.edit_time_checkup)
    await state.update_data(checkup_id=checkup_id)
    await call.message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ, —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á–µ–∫–ê–ø"
                              f"\n\n–°–µ–π—á–∞—Å –¥–∞–Ω–Ω—ã–π —á–µ–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ {checkup.time_checkup.strftime('%H:%M')}",
                              reply_markup=menu_keyboard.as_markup())
    await call.message.delete()


@system_settings_router.message(F.text, InputMessage.edit_time_checkup)
async def enter_new_checkup_time(message: Message, state: FSMContext):
    user_id = message.from_user.id
    result = is_valid_time(message.text)
    state_data = await state.get_data()
    await state.clear()
    checkup_id = int(state_data.get("checkup_id"))
    if result:
        await checkup_repository.update_time_checkup_by_checkup_id(checkup_id=checkup_id,
                                                                   time_checkup=message.text)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–π —á–µ–∫–∞–ø –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {message.text}",
                             reply_markup=menu_keyboard.as_markup())
        return
    await state.set_state(InputMessage.edit_time_checkup)
    await state.update_data(checkup_id=checkup_id)
    await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ —Ç–æ–±–æ–π –≤—Ä–µ–º—è –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä - 13:45. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                         reply_markup=menu_keyboard.as_markup())
